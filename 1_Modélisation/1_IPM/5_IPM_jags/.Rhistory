# Define the cell probabilities of the multistate m-array
for (t in 1:(n.years-2)){
U[(t-1)*ns+(1:ns), (t-1)*ns+(1:ns)] <- ones
for (j in (t+1):(n.years-1)){
U[(t-1)*ns+(1:ns), (j-1)*ns+(1:ns)] <- U[(t-1)*ns+(1:ns), (j-2)*ns+(1:ns)] %*% psi[,] %*% dq[,t,]
} #j
} #t
U[(n.years-2)*ns+(1:ns), (n.years-2)*ns+(1:ns)] <- ones
# Diagonal
for (t in 1:(n.years-2)){
pr[(t-1)*ns+(1:ns),(t-1)*ns+(1:ns)] <- U[(t-1)*ns+(1:ns),(t-1)*ns+(1:ns)] %*% psi[,] %*% dp[,t,]
# Above main diagonal
for (j in (t+1):(n.years-1)){
pr[(t-1)*ns+(1:ns), (j-1)*ns+(1:ns)] <- U[(t-1)*ns+(1:ns), (j-1)*ns+(1:ns)] %*% psi[,] %*% dp[,j,]
} #j
} #t
pr[(n.years-2)*ns+(1:ns), (n.years-2)*ns+(1:ns)] <- psi[,] %*% dp[,n.years-1,]
# Below main diagonal
for (t in 2:(n.years-1)){
for (j in 1:(t-1)){
pr[(t-1)*ns+(1:ns),(j-1)*ns+(1:ns)] <- zero
} #j
} #t
# Last column: probability of non-recapture
for (t in 1:((n.years-1)*ns)){
pr[t,(n.years*ns-(ns-1))] <- 1-sum(pr[t,1:((n.years-1)*ns)])
} #t
# Define the multinomial likelihood
#for (t in 1:((n.years-1)*ns)){
for (t in 1:((19)*ns)){
marr[t,1:(n.years*ns-(ns-1))] ~ dmulti(pr[t,], rel[t])
}
}
")
# Initial values
inits <- function(){
return(list())
}
# Parameters monitored
parameters <- c("phi", "kappa", "mean.eta", "mean.nu", "p")
# MCMC settings
#ni <- 150000; nb <- 50000; nc <- 3; nt <- 100; na <- 3000 # 143min
#ni <- 1500; nb <- 100; nc <- 3; nt <- 100; na <- 3000 # 6min
ni <- 1000; nb <- 100; nc <- 2; nt <- 1; na <- 2500 # 15min
# Call JAGS from R and check convergence
out1 <- jags(jags.data, inits, parameters, "model1.txt", n.iter=ni, n.burnin=nb, n.chains=nc,
n.thin=nt, n.adapt=na, parallel=TRUE)
# Only CMR component  -----------------------------------------------------
library(IPMbook)
library(jagsUI)
library(tidyverse)
source("simulation/simul_peron_simple.R")
# Bundle data
marr <- marray(y, unobs=5)
n.years = ncol(y)
n.colony = 5
n.age.class = 3
ns=n.colony*n.age.class
nest.states = (1:n.colony)+0*n.colony
breed.states = (1:n.colony)+1*n.colony
prebr.states = (1:n.colony)+2*n.colony
state2col = rep(1:n.colony, time = n.age.class)
jags.data <- list(marr = marr, rel=rowSums(marr),
n.colony=n.colony,
n.years=n.years,
ns=ns,
zero=matrix(0, ncol=ns, nrow=ns), ones=diag(ns),
nest.states = nest.states,
breed.states = breed.states,
prebr.states = prebr.states,
state2col = state2col)
# Write JAGS model file
cat(file = "model1.txt", "
model {
# only for survey
#rho[1] ~ dunif(0, 4) # productivité de la Ronze
#rho[2] ~ dunif(0, 4) # productivité des autres colonies
phi[1] ~ dunif(0, 1) # survie la première année
phi[2] ~ dunif(0, 1) # Survie des subadultes et adultes
kappa[1] ~ dunif(0, 1) # probabilité de recruitement de la Ronze
kappa[2] ~ dunif(0, 1) # probabilité de recruitement des autres colonies
mean.eta ~ dunif(0, 1)
mean.nu ~ dunif(0, 1)
for (dep in 1:n.colony){
for (arr in 1:n.colony){
eta_[dep, arr] <- mean.eta  # natal dispersal
nu_[dep, arr] <- mean.nu # breeding dispersal
}
}
# Pour maintenir la nature stochastique des dispersions : somme rows = 1
for (dep in 1:n.colony){
for (arr in 1:n.colony){
eta[dep, arr] <- mean.eta / (eta_[dep, 1] + eta_[dep, 2] + eta_[dep, 3] + eta_[dep, 4] + eta_[dep, 5])
nu[dep, arr] <- mean.nu / (nu_[dep, 1] + nu_[dep, 2] + nu_[dep, 3] + nu_[dep, 4] + nu_[dep, 5])
}
}
# detection probability
p ~ dunif(0, 1)
# Define state-transition
# Nestling
for (prev.state in nest.states){
# nestlings may become pre breeders
for (next_state in prebr.states){
psi[prev.state,next_state] <- phi[1] * eta[state2col[prev.state],state2col[next_state]]
}
# nestlings do not become nestling or breeders
for (next_state in c(nest.states,breed.states)){
psi[prev.state,next_state] <- 0
}
}
# Breeders
for (prev.state in breed.states){
# Breeders may stay breeders
for (next_state in breed.states){
psi[prev.state,next_state] <- phi[2] * nu[state2col[prev.state],state2col[next_state]]
}
# Breeders cannot become nestling or prebreeders
for (next_state in c(nest.states, prebr.states)){
psi[prev.state,next_state] <- 0
}
}
# Pre-Breeders # la forme compact a un pbm abec le choix de kappa - a travailler
psi[11,1] <- 0
psi[11,2] <- 0
psi[11,3] <- 0
psi[11,4] <- 0
psi[11,5] <- 0
psi[11,6] <- phi[2] * kappa[1]
psi[11,7] <- 0
psi[11,8] <- 0
psi[11,9] <- 0
psi[11,10] <- 0
psi[11,11] <- phi[2] * (1 - kappa[1])
psi[11,12] <- 0
psi[11,13] <- 0
psi[11,14] <- 0
psi[11,15] <- 0
psi[12,1] <- 0
psi[12,2] <- 0
psi[12,3] <- 0
psi[12,4] <- 0
psi[12,5] <- 0
psi[12,6] <- 0
psi[12,7] <- phi[2] * kappa[2]
psi[12,8] <- 0
psi[12,9] <- 0
psi[12,10] <- 0
psi[12,11] <- 0
psi[12,12] <- phi[2] * (1 - kappa[2])
psi[12,13] <- 0
psi[12,14] <- 0
psi[12,15] <- 0
psi[13,1] <- 0
psi[13,2] <- 0
psi[13,3] <- 0
psi[13,4] <- 0
psi[13,5] <- 0
psi[13,6] <- 0
psi[13,7] <- 0
psi[13,8] <- phi[2] * kappa[2]
psi[13,9] <- 0
psi[13,10] <- 0
psi[13,11] <- 0
psi[13,12] <- 0
psi[13,13] <- phi[2] * (1 - kappa[2])
psi[13,14] <- 0
psi[13,15] <- 0
psi[14,1] <- 0
psi[14,2] <- 0
psi[14,3] <- 0
psi[14,4] <- 0
psi[14,5] <- 0
psi[14,6] <- 0
psi[14,7] <- 0
psi[14,8] <- 0
psi[14,9] <- phi[2] * kappa[2]
psi[14,10] <- 0
psi[14,11] <- 0
psi[14,12] <- 0
psi[14,13] <- 0
psi[14,14] <- phi[2] * (1 - kappa[2])
psi[14,15] <- 0
psi[15,1] <- 0
psi[15,2] <- 0
psi[15,3] <- 0
psi[15,4] <- 0
psi[15,5] <- 0
psi[15,6] <- 0
psi[15,7] <- 0
psi[15,8] <- 0
psi[15,9] <- 0
psi[15,10] <- phi[2] * kappa[2]
psi[15,11] <- 0
psi[15,12] <- 0
psi[15,13] <- 0
psi[15,14] <- 0
psi[15,15] <- phi[2] * (1 - kappa[2])
#  Define re-encounter probabilities
for (t in 1:(n.years-1)){
po[1,t] <- 0
po[2,t] <- 0
po[3,t] <- 0
po[4,t] <- 0
po[5,t] <- 0
po[6,t] <- p
po[7,t] <- p
po[8,t] <- p
po[9,t] <- p
po[10,t] <- p
po[11,t] <- 0
po[12,t] <- 0
po[13,t] <- 0
po[14,t] <- 0
po[15,t] <- 0
# Calculate probability of non-encounter (dq) and reshape the array for the encounter
# probabilities
for (s in 1:ns){
dp[s,t,s] <- po[s,t]
dq[s,t,s] <- 1-po[s,t]
} #s
for (s in 1:(ns-1)){
for (m in (s+1):ns){
dp[s,t,m] <- 0
dq[s,t,m] <- 0
} #m
} #s
for (s in 2:ns){
for (m in 1:(s-1)){
dp[s,t,m] <- 0
dq[s,t,m] <- 0
} #m
} #s
} #t
# Define the cell probabilities of the multistate m-array
for (t in 1:(n.years-2)){
U[(t-1)*ns+(1:ns), (t-1)*ns+(1:ns)] <- ones
for (j in (t+1):(n.years-1)){
U[(t-1)*ns+(1:ns), (j-1)*ns+(1:ns)] <- U[(t-1)*ns+(1:ns), (j-2)*ns+(1:ns)] %*% psi[,] %*% dq[,t,]
} #j
} #t
U[(n.years-2)*ns+(1:ns), (n.years-2)*ns+(1:ns)] <- ones
# Diagonal
for (t in 1:(n.years-2)){
pr[(t-1)*ns+(1:ns),(t-1)*ns+(1:ns)] <- U[(t-1)*ns+(1:ns),(t-1)*ns+(1:ns)] %*% psi[,] %*% dp[,t,]
# Above main diagonal
for (j in (t+1):(n.years-1)){
pr[(t-1)*ns+(1:ns), (j-1)*ns+(1:ns)] <- U[(t-1)*ns+(1:ns), (j-1)*ns+(1:ns)] %*% psi[,] %*% dp[,j,]
} #j
} #t
pr[(n.years-2)*ns+(1:ns), (n.years-2)*ns+(1:ns)] <- psi[,] %*% dp[,n.years-1,]
# Below main diagonal
for (t in 2:(n.years-1)){
for (j in 1:(t-1)){
pr[(t-1)*ns+(1:ns),(j-1)*ns+(1:ns)] <- zero
} #j
} #t
# Last column: probability of non-recapture
for (t in 1:((n.years-1)*ns)){
pr[t,(n.years*ns-(ns-1))] <- 1-sum(pr[t,1:((n.years-1)*ns)])
} #t
# Define the multinomial likelihood
#for (t in 1:((n.years-1)*ns)){
for (t in 1:((19)*ns)){
marr[t,1:(n.years*ns-(ns-1))] ~ dmulti(pr[t,], rel[t])
}
}
")
# Initial values
inits <- function(){
return(list())
}
# Parameters monitored
parameters <- c("phi", "kappa", "mean.eta", "mean.nu", "p")
# MCMC settings
#ni <- 150000; nb <- 50000; nc <- 3; nt <- 100; na <- 3000 # 143min
#ni <- 1500; nb <- 100; nc <- 3; nt <- 100; na <- 3000 # 6min
ni <- 1000; nb <- 100; nc <- 2; nt <- 1; na <- 2500 # 15min
# Call JAGS from R and check convergence
out1 <- jags(jags.data, inits, parameters, "model1.txt", n.iter=ni, n.burnin=nb, n.chains=nc,
n.thin=nt, n.adapt=na, parallel=TRUE)
# Only CMR component  -----------------------------------------------------
library(IPMbook)
library(jagsUI)
library(tidyverse)
source("simulation/simul_peron_simple.R")
# Bundle data
marr <- marray(y, unobs=5)
n.years = ncol(y)
n.colony = 5
n.age.class = 3
ns=n.colony*n.age.class
nest.states = (1:n.colony)+0*n.colony
breed.states = (1:n.colony)+1*n.colony
prebr.states = (1:n.colony)+2*n.colony
state2col = rep(1:n.colony, time = n.age.class)
jags.data <- list(marr = marr, rel=rowSums(marr),
n.colony=n.colony,
n.years=n.years,
ns=ns,
zero=matrix(0, ncol=ns, nrow=ns), ones=diag(ns),
nest.states = nest.states,
breed.states = breed.states,
prebr.states = prebr.states,
state2col = state2col)
# Write JAGS model file
cat(file = "model1.txt", "
model {
# only for survey
#rho[1] ~ dunif(0, 4) # productivité de la Ronze
#rho[2] ~ dunif(0, 4) # productivité des autres colonies
phi[1] ~ dunif(0, 1) # survie la première année
phi[2] ~ dunif(0, 1) # Survie des subadultes et adultes
kappa[1] ~ dunif(0, 1) # probabilité de recruitement de la Ronze
kappa[2] ~ dunif(0, 1) # probabilité de recruitement des autres colonies
mean.eta ~ dunif(0, 1)
mean.nu ~ dunif(0, 1)
for (dep in 1:n.colony){
for (arr in 1:n.colony){
eta_[dep, arr] <- mean.eta  # natal dispersal
nu_[dep, arr] <- mean.nu # breeding dispersal
}
}
# Pour maintenir la nature stochastique des dispersions : somme rows = 1
for (dep in 1:n.colony){
for (arr in 1:n.colony){
eta[dep, arr] <- mean.eta / (eta_[dep, 1] + eta_[dep, 2] + eta_[dep, 3] + eta_[dep, 4] + eta_[dep, 5])
nu[dep, arr] <- mean.nu / (nu_[dep, 1] + nu_[dep, 2] + nu_[dep, 3] + nu_[dep, 4] + nu_[dep, 5])
}
}
# detection probability
p ~ dunif(0, 1)
# Define state-transition
# Nestling
for (prev.state in nest.states){
# nestlings may become pre breeders
for (next_state in prebr.states){
psi[prev.state,next_state] <- phi[1] * eta[state2col[prev.state],state2col[next_state]]
}
# nestlings do not become nestling or breeders
for (next_state in c(nest.states,breed.states)){
psi[prev.state,next_state] <- 0
}
}
# Breeders
for (prev.state in breed.states){
# Breeders may stay breeders
for (next_state in breed.states){
psi[prev.state,next_state] <- phi[2] * nu[state2col[prev.state],state2col[next_state]]
}
# Breeders cannot become nestling or prebreeders
for (next_state in c(nest.states, prebr.states)){
psi[prev.state,next_state] <- 0
}
}
# Pre-Breeders # la forme compact a un pbm abec le choix de kappa - a travailler
psi[11,1] <- 0
psi[11,2] <- 0
psi[11,3] <- 0
psi[11,4] <- 0
psi[11,5] <- 0
psi[11,6] <- phi[2] * kappa[1]
psi[11,7] <- 0
psi[11,8] <- 0
psi[11,9] <- 0
psi[11,10] <- 0
psi[11,11] <- phi[2] * (1 - kappa[1])
psi[11,12] <- 0
psi[11,13] <- 0
psi[11,14] <- 0
psi[11,15] <- 0
psi[12,1] <- 0
psi[12,2] <- 0
psi[12,3] <- 0
psi[12,4] <- 0
psi[12,5] <- 0
psi[12,6] <- 0
psi[12,7] <- phi[2] * kappa[2]
psi[12,8] <- 0
psi[12,9] <- 0
psi[12,10] <- 0
psi[12,11] <- 0
psi[12,12] <- phi[2] * (1 - kappa[2])
psi[12,13] <- 0
psi[12,14] <- 0
psi[12,15] <- 0
psi[13,1] <- 0
psi[13,2] <- 0
psi[13,3] <- 0
psi[13,4] <- 0
psi[13,5] <- 0
psi[13,6] <- 0
psi[13,7] <- 0
psi[13,8] <- phi[2] * kappa[2]
psi[13,9] <- 0
psi[13,10] <- 0
psi[13,11] <- 0
psi[13,12] <- 0
psi[13,13] <- phi[2] * (1 - kappa[2])
psi[13,14] <- 0
psi[13,15] <- 0
psi[14,1] <- 0
psi[14,2] <- 0
psi[14,3] <- 0
psi[14,4] <- 0
psi[14,5] <- 0
psi[14,6] <- 0
psi[14,7] <- 0
psi[14,8] <- 0
psi[14,9] <- phi[2] * kappa[2]
psi[14,10] <- 0
psi[14,11] <- 0
psi[14,12] <- 0
psi[14,13] <- 0
psi[14,14] <- phi[2] * (1 - kappa[2])
psi[14,15] <- 0
psi[15,1] <- 0
psi[15,2] <- 0
psi[15,3] <- 0
psi[15,4] <- 0
psi[15,5] <- 0
psi[15,6] <- 0
psi[15,7] <- 0
psi[15,8] <- 0
psi[15,9] <- 0
psi[15,10] <- phi[2] * kappa[2]
psi[15,11] <- 0
psi[15,12] <- 0
psi[15,13] <- 0
psi[15,14] <- 0
psi[15,15] <- phi[2] * (1 - kappa[2])
#  Define re-encounter probabilities
for (t in 1:(n.years-1)){
for(state in nest.states){
po[state,t] <- 0
}
for(state in breed.states){
po[state,t] <- p
}
for(state in prebr.states){
po[state,t] <- 0
}
# Calculate probability of non-encounter (dq) and reshape the array for the encounter
# probabilities
for (s in 1:ns){
dp[s,t,s] <- po[s,t]
dq[s,t,s] <- 1-po[s,t]
} #s
for (s in 1:(ns-1)){
for (m in (s+1):ns){
dp[s,t,m] <- 0
dq[s,t,m] <- 0
} #m
} #s
for (s in 2:ns){
for (m in 1:(s-1)){
dp[s,t,m] <- 0
dq[s,t,m] <- 0
} #m
} #s
} #t
# Define the cell probabilities of the multistate m-array
for (t in 1:(n.years-2)){
U[(t-1)*ns+(1:ns), (t-1)*ns+(1:ns)] <- ones
for (j in (t+1):(n.years-1)){
U[(t-1)*ns+(1:ns), (j-1)*ns+(1:ns)] <- U[(t-1)*ns+(1:ns), (j-2)*ns+(1:ns)] %*% psi[,] %*% dq[,t,]
} #j
} #t
U[(n.years-2)*ns+(1:ns), (n.years-2)*ns+(1:ns)] <- ones
# Diagonal
for (t in 1:(n.years-2)){
pr[(t-1)*ns+(1:ns),(t-1)*ns+(1:ns)] <- U[(t-1)*ns+(1:ns),(t-1)*ns+(1:ns)] %*% psi[,] %*% dp[,t,]
# Above main diagonal
for (j in (t+1):(n.years-1)){
pr[(t-1)*ns+(1:ns), (j-1)*ns+(1:ns)] <- U[(t-1)*ns+(1:ns), (j-1)*ns+(1:ns)] %*% psi[,] %*% dp[,j,]
} #j
} #t
pr[(n.years-2)*ns+(1:ns), (n.years-2)*ns+(1:ns)] <- psi[,] %*% dp[,n.years-1,]
# Below main diagonal
for (t in 2:(n.years-1)){
for (j in 1:(t-1)){
pr[(t-1)*ns+(1:ns),(j-1)*ns+(1:ns)] <- zero
} #j
} #t
# Last column: probability of non-recapture
for (t in 1:((n.years-1)*ns)){
pr[t,(n.years*ns-(ns-1))] <- 1-sum(pr[t,1:((n.years-1)*ns)])
} #t
# Define the multinomial likelihood
#for (t in 1:((n.years-1)*ns)){
for (t in 1:((19)*ns)){
marr[t,1:(n.years*ns-(ns-1))] ~ dmulti(pr[t,], rel[t])
}
}
")
# Initial values
inits <- function(){
return(list())
}
# Parameters monitored
parameters <- c("phi", "kappa", "mean.eta", "mean.nu", "p")
# MCMC settings
#ni <- 150000; nb <- 50000; nc <- 3; nt <- 100; na <- 3000 # 143min
#ni <- 1500; nb <- 100; nc <- 3; nt <- 100; na <- 3000 # 6min
ni <- 1000; nb <- 100; nc <- 2; nt <- 1; na <- 2500 # 15min
# Call JAGS from R and check convergence
out1 <- jags(jags.data, inits, parameters, "model1.txt", n.iter=ni, n.burnin=nb, n.chains=nc,
n.thin=nt, n.adapt=na, parallel=TRUE)
# Only CMR component  -----------------------------------------------------
library(IPMbook)
library(jagsUI)
library(tidyverse)
source("simulation/simul_peron_simple.R")
